// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package elasticsearch_domain

import (
	"context"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/elasticsearchservice"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/elasticsearchservice-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.ElasticsearchService{}
	_ = &svcapitypes.ElasticsearchDomain{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer exit(err)
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.DescribeElasticsearchDomainOutput
	resp, err = rm.sdkapi.DescribeElasticsearchDomainWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "DescribeElasticsearchDomain", err)
	if err != nil {
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "ResourceNotFoundException" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.DomainStatus.ARN != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.DomainStatus.ARN)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.DomainStatus.AccessPolicies != nil {
		ko.Spec.AccessPolicies = resp.DomainStatus.AccessPolicies
	} else {
		ko.Spec.AccessPolicies = nil
	}
	if resp.DomainStatus.AdvancedOptions != nil {
		f2 := map[string]*string{}
		for f2key, f2valiter := range resp.DomainStatus.AdvancedOptions {
			var f2val string
			f2val = *f2valiter
			f2[f2key] = &f2val
		}
		ko.Spec.AdvancedOptions = f2
	} else {
		ko.Spec.AdvancedOptions = nil
	}
	if resp.DomainStatus.AdvancedSecurityOptions != nil {
		f3 := &svcapitypes.AdvancedSecurityOptionsInput{}
		if resp.DomainStatus.AdvancedSecurityOptions.Enabled != nil {
			f3.Enabled = resp.DomainStatus.AdvancedSecurityOptions.Enabled
		}
		if resp.DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled != nil {
			f3.InternalUserDatabaseEnabled = resp.DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled
		}
		if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions != nil {
			f3f2 := &svcapitypes.SAMLOptionsInput{}
			if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled != nil {
				f3f2.Enabled = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled
			}
			if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp != nil {
				f3f2f1 := &svcapitypes.SAMLIDp{}
				if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId != nil {
					f3f2f1.EntityID = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId
				}
				if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent != nil {
					f3f2f1.MetadataContent = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent
				}
				f3f2.IDp = f3f2f1
			}
			if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey != nil {
				f3f2.RolesKey = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey
			}
			if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes != nil {
				f3f2.SessionTimeoutMinutes = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes
			}
			if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey != nil {
				f3f2.SubjectKey = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey
			}
			f3.SAMLOptions = f3f2
		}
		ko.Spec.AdvancedSecurityOptions = f3
	} else {
		ko.Spec.AdvancedSecurityOptions = nil
	}
	if resp.DomainStatus.AutoTuneOptions != nil {
		f4 := &svcapitypes.AutoTuneOptionsInput{}
		ko.Spec.AutoTuneOptions = f4
	} else {
		ko.Spec.AutoTuneOptions = nil
	}
	if resp.DomainStatus.CognitoOptions != nil {
		f5 := &svcapitypes.CognitoOptions{}
		if resp.DomainStatus.CognitoOptions.Enabled != nil {
			f5.Enabled = resp.DomainStatus.CognitoOptions.Enabled
		}
		if resp.DomainStatus.CognitoOptions.IdentityPoolId != nil {
			f5.IdentityPoolID = resp.DomainStatus.CognitoOptions.IdentityPoolId
		}
		if resp.DomainStatus.CognitoOptions.RoleArn != nil {
			f5.RoleARN = resp.DomainStatus.CognitoOptions.RoleArn
		}
		if resp.DomainStatus.CognitoOptions.UserPoolId != nil {
			f5.UserPoolID = resp.DomainStatus.CognitoOptions.UserPoolId
		}
		ko.Spec.CognitoOptions = f5
	} else {
		ko.Spec.CognitoOptions = nil
	}
	if resp.DomainStatus.Created != nil {
		ko.Status.Created = resp.DomainStatus.Created
	} else {
		ko.Status.Created = nil
	}
	if resp.DomainStatus.Deleted != nil {
		ko.Status.Deleted = resp.DomainStatus.Deleted
	} else {
		ko.Status.Deleted = nil
	}
	if resp.DomainStatus.DomainEndpointOptions != nil {
		f8 := &svcapitypes.DomainEndpointOptions{}
		if resp.DomainStatus.DomainEndpointOptions.CustomEndpoint != nil {
			f8.CustomEndpoint = resp.DomainStatus.DomainEndpointOptions.CustomEndpoint
		}
		if resp.DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn != nil {
			f8.CustomEndpointCertificateARN = resp.DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn
		}
		if resp.DomainStatus.DomainEndpointOptions.CustomEndpointEnabled != nil {
			f8.CustomEndpointEnabled = resp.DomainStatus.DomainEndpointOptions.CustomEndpointEnabled
		}
		if resp.DomainStatus.DomainEndpointOptions.EnforceHTTPS != nil {
			f8.EnforceHTTPS = resp.DomainStatus.DomainEndpointOptions.EnforceHTTPS
		}
		if resp.DomainStatus.DomainEndpointOptions.TLSSecurityPolicy != nil {
			f8.TLSSecurityPolicy = resp.DomainStatus.DomainEndpointOptions.TLSSecurityPolicy
		}
		ko.Spec.DomainEndpointOptions = f8
	} else {
		ko.Spec.DomainEndpointOptions = nil
	}
	if resp.DomainStatus.DomainId != nil {
		ko.Status.DomainID = resp.DomainStatus.DomainId
	} else {
		ko.Status.DomainID = nil
	}
	if resp.DomainStatus.DomainName != nil {
		ko.Spec.DomainName = resp.DomainStatus.DomainName
	} else {
		ko.Spec.DomainName = nil
	}
	if resp.DomainStatus.EBSOptions != nil {
		f11 := &svcapitypes.EBSOptions{}
		if resp.DomainStatus.EBSOptions.EBSEnabled != nil {
			f11.EBSEnabled = resp.DomainStatus.EBSOptions.EBSEnabled
		}
		if resp.DomainStatus.EBSOptions.Iops != nil {
			f11.IOPS = resp.DomainStatus.EBSOptions.Iops
		}
		if resp.DomainStatus.EBSOptions.VolumeSize != nil {
			f11.VolumeSize = resp.DomainStatus.EBSOptions.VolumeSize
		}
		if resp.DomainStatus.EBSOptions.VolumeType != nil {
			f11.VolumeType = resp.DomainStatus.EBSOptions.VolumeType
		}
		ko.Spec.EBSOptions = f11
	} else {
		ko.Spec.EBSOptions = nil
	}
	if resp.DomainStatus.ElasticsearchClusterConfig != nil {
		f12 := &svcapitypes.ElasticsearchClusterConfig{}
		if resp.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount != nil {
			f12.DedicatedMasterCount = resp.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount
		}
		if resp.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled != nil {
			f12.DedicatedMasterEnabled = resp.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled
		}
		if resp.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType != nil {
			f12.DedicatedMasterType = resp.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType
		}
		if resp.DomainStatus.ElasticsearchClusterConfig.InstanceCount != nil {
			f12.InstanceCount = resp.DomainStatus.ElasticsearchClusterConfig.InstanceCount
		}
		if resp.DomainStatus.ElasticsearchClusterConfig.InstanceType != nil {
			f12.InstanceType = resp.DomainStatus.ElasticsearchClusterConfig.InstanceType
		}
		if resp.DomainStatus.ElasticsearchClusterConfig.WarmCount != nil {
			f12.WarmCount = resp.DomainStatus.ElasticsearchClusterConfig.WarmCount
		}
		if resp.DomainStatus.ElasticsearchClusterConfig.WarmEnabled != nil {
			f12.WarmEnabled = resp.DomainStatus.ElasticsearchClusterConfig.WarmEnabled
		}
		if resp.DomainStatus.ElasticsearchClusterConfig.WarmType != nil {
			f12.WarmType = resp.DomainStatus.ElasticsearchClusterConfig.WarmType
		}
		if resp.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig != nil {
			f12f8 := &svcapitypes.ZoneAwarenessConfig{}
			if resp.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount != nil {
				f12f8.AvailabilityZoneCount = resp.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount
			}
			f12.ZoneAwarenessConfig = f12f8
		}
		if resp.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled != nil {
			f12.ZoneAwarenessEnabled = resp.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled
		}
		ko.Spec.ElasticsearchClusterConfig = f12
	} else {
		ko.Spec.ElasticsearchClusterConfig = nil
	}
	if resp.DomainStatus.ElasticsearchVersion != nil {
		ko.Spec.ElasticsearchVersion = resp.DomainStatus.ElasticsearchVersion
	} else {
		ko.Spec.ElasticsearchVersion = nil
	}
	if resp.DomainStatus.EncryptionAtRestOptions != nil {
		f14 := &svcapitypes.EncryptionAtRestOptions{}
		if resp.DomainStatus.EncryptionAtRestOptions.Enabled != nil {
			f14.Enabled = resp.DomainStatus.EncryptionAtRestOptions.Enabled
		}
		if resp.DomainStatus.EncryptionAtRestOptions.KmsKeyId != nil {
			f14.KMSKeyID = resp.DomainStatus.EncryptionAtRestOptions.KmsKeyId
		}
		ko.Spec.EncryptionAtRestOptions = f14
	} else {
		ko.Spec.EncryptionAtRestOptions = nil
	}
	if resp.DomainStatus.Endpoint != nil {
		ko.Status.Endpoint = resp.DomainStatus.Endpoint
	} else {
		ko.Status.Endpoint = nil
	}
	if resp.DomainStatus.Endpoints != nil {
		f16 := map[string]*string{}
		for f16key, f16valiter := range resp.DomainStatus.Endpoints {
			var f16val string
			f16val = *f16valiter
			f16[f16key] = &f16val
		}
		ko.Status.Endpoints = f16
	} else {
		ko.Status.Endpoints = nil
	}
	if resp.DomainStatus.LogPublishingOptions != nil {
		f17 := map[string]*svcapitypes.LogPublishingOption{}
		for f17key, f17valiter := range resp.DomainStatus.LogPublishingOptions {
			f17val := &svcapitypes.LogPublishingOption{}
			if f17valiter.CloudWatchLogsLogGroupArn != nil {
				f17val.CloudWatchLogsLogGroupARN = f17valiter.CloudWatchLogsLogGroupArn
			}
			if f17valiter.Enabled != nil {
				f17val.Enabled = f17valiter.Enabled
			}
			f17[f17key] = f17val
		}
		ko.Spec.LogPublishingOptions = f17
	} else {
		ko.Spec.LogPublishingOptions = nil
	}
	if resp.DomainStatus.NodeToNodeEncryptionOptions != nil {
		f18 := &svcapitypes.NodeToNodeEncryptionOptions{}
		if resp.DomainStatus.NodeToNodeEncryptionOptions.Enabled != nil {
			f18.Enabled = resp.DomainStatus.NodeToNodeEncryptionOptions.Enabled
		}
		ko.Spec.NodeToNodeEncryptionOptions = f18
	} else {
		ko.Spec.NodeToNodeEncryptionOptions = nil
	}
	if resp.DomainStatus.Processing != nil {
		ko.Status.Processing = resp.DomainStatus.Processing
	} else {
		ko.Status.Processing = nil
	}
	if resp.DomainStatus.ServiceSoftwareOptions != nil {
		f20 := &svcapitypes.ServiceSoftwareOptions{}
		if resp.DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate != nil {
			f20.AutomatedUpdateDate = &metav1.Time{*resp.DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate}
		}
		if resp.DomainStatus.ServiceSoftwareOptions.Cancellable != nil {
			f20.Cancellable = resp.DomainStatus.ServiceSoftwareOptions.Cancellable
		}
		if resp.DomainStatus.ServiceSoftwareOptions.CurrentVersion != nil {
			f20.CurrentVersion = resp.DomainStatus.ServiceSoftwareOptions.CurrentVersion
		}
		if resp.DomainStatus.ServiceSoftwareOptions.Description != nil {
			f20.Description = resp.DomainStatus.ServiceSoftwareOptions.Description
		}
		if resp.DomainStatus.ServiceSoftwareOptions.NewVersion != nil {
			f20.NewVersion = resp.DomainStatus.ServiceSoftwareOptions.NewVersion
		}
		if resp.DomainStatus.ServiceSoftwareOptions.OptionalDeployment != nil {
			f20.OptionalDeployment = resp.DomainStatus.ServiceSoftwareOptions.OptionalDeployment
		}
		if resp.DomainStatus.ServiceSoftwareOptions.UpdateAvailable != nil {
			f20.UpdateAvailable = resp.DomainStatus.ServiceSoftwareOptions.UpdateAvailable
		}
		if resp.DomainStatus.ServiceSoftwareOptions.UpdateStatus != nil {
			f20.UpdateStatus = resp.DomainStatus.ServiceSoftwareOptions.UpdateStatus
		}
		ko.Status.ServiceSoftwareOptions = f20
	} else {
		ko.Status.ServiceSoftwareOptions = nil
	}
	if resp.DomainStatus.SnapshotOptions != nil {
		f21 := &svcapitypes.SnapshotOptions{}
		if resp.DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour != nil {
			f21.AutomatedSnapshotStartHour = resp.DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour
		}
		ko.Spec.SnapshotOptions = f21
	} else {
		ko.Spec.SnapshotOptions = nil
	}
	if resp.DomainStatus.UpgradeProcessing != nil {
		ko.Status.UpgradeProcessing = resp.DomainStatus.UpgradeProcessing
	} else {
		ko.Status.UpgradeProcessing = nil
	}
	if resp.DomainStatus.VPCOptions != nil {
		f23 := &svcapitypes.VPCOptions{}
		if resp.DomainStatus.VPCOptions.SecurityGroupIds != nil {
			f23f1 := []*string{}
			for _, f23f1iter := range resp.DomainStatus.VPCOptions.SecurityGroupIds {
				var f23f1elem string
				f23f1elem = *f23f1iter
				f23f1 = append(f23f1, &f23f1elem)
			}
			f23.SecurityGroupIDs = f23f1
		}
		if resp.DomainStatus.VPCOptions.SubnetIds != nil {
			f23f2 := []*string{}
			for _, f23f2iter := range resp.DomainStatus.VPCOptions.SubnetIds {
				var f23f2elem string
				f23f2elem = *f23f2iter
				f23f2 = append(f23f2, &f23f2elem)
			}
			f23.SubnetIDs = f23f2
		}
		ko.Spec.VPCOptions = f23
	} else {
		ko.Spec.VPCOptions = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.DomainName == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeElasticsearchDomainInput, error) {
	res := &svcsdk.DescribeElasticsearchDomainInput{}

	if r.ko.Spec.DomainName != nil {
		res.SetDomainName(*r.ko.Spec.DomainName)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer exit(err)
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateElasticsearchDomainOutput
	_ = resp
	resp, err = rm.sdkapi.CreateElasticsearchDomainWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateElasticsearchDomain", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.DomainStatus.ARN != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.DomainStatus.ARN)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.DomainStatus.AccessPolicies != nil {
		ko.Spec.AccessPolicies = resp.DomainStatus.AccessPolicies
	} else {
		ko.Spec.AccessPolicies = nil
	}
	if resp.DomainStatus.AdvancedOptions != nil {
		f2 := map[string]*string{}
		for f2key, f2valiter := range resp.DomainStatus.AdvancedOptions {
			var f2val string
			f2val = *f2valiter
			f2[f2key] = &f2val
		}
		ko.Spec.AdvancedOptions = f2
	} else {
		ko.Spec.AdvancedOptions = nil
	}
	if resp.DomainStatus.AdvancedSecurityOptions != nil {
		f3 := &svcapitypes.AdvancedSecurityOptionsInput{}
		if resp.DomainStatus.AdvancedSecurityOptions.Enabled != nil {
			f3.Enabled = resp.DomainStatus.AdvancedSecurityOptions.Enabled
		}
		if resp.DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled != nil {
			f3.InternalUserDatabaseEnabled = resp.DomainStatus.AdvancedSecurityOptions.InternalUserDatabaseEnabled
		}
		if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions != nil {
			f3f2 := &svcapitypes.SAMLOptionsInput{}
			if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled != nil {
				f3f2.Enabled = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Enabled
			}
			if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp != nil {
				f3f2f1 := &svcapitypes.SAMLIDp{}
				if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId != nil {
					f3f2f1.EntityID = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.EntityId
				}
				if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent != nil {
					f3f2f1.MetadataContent = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.Idp.MetadataContent
				}
				f3f2.IDp = f3f2f1
			}
			if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey != nil {
				f3f2.RolesKey = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.RolesKey
			}
			if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes != nil {
				f3f2.SessionTimeoutMinutes = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes
			}
			if resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey != nil {
				f3f2.SubjectKey = resp.DomainStatus.AdvancedSecurityOptions.SAMLOptions.SubjectKey
			}
			f3.SAMLOptions = f3f2
		}
		ko.Spec.AdvancedSecurityOptions = f3
	} else {
		ko.Spec.AdvancedSecurityOptions = nil
	}
	if resp.DomainStatus.AutoTuneOptions != nil {
		f4 := &svcapitypes.AutoTuneOptionsInput{}
		ko.Spec.AutoTuneOptions = f4
	} else {
		ko.Spec.AutoTuneOptions = nil
	}
	if resp.DomainStatus.CognitoOptions != nil {
		f5 := &svcapitypes.CognitoOptions{}
		if resp.DomainStatus.CognitoOptions.Enabled != nil {
			f5.Enabled = resp.DomainStatus.CognitoOptions.Enabled
		}
		if resp.DomainStatus.CognitoOptions.IdentityPoolId != nil {
			f5.IdentityPoolID = resp.DomainStatus.CognitoOptions.IdentityPoolId
		}
		if resp.DomainStatus.CognitoOptions.RoleArn != nil {
			f5.RoleARN = resp.DomainStatus.CognitoOptions.RoleArn
		}
		if resp.DomainStatus.CognitoOptions.UserPoolId != nil {
			f5.UserPoolID = resp.DomainStatus.CognitoOptions.UserPoolId
		}
		ko.Spec.CognitoOptions = f5
	} else {
		ko.Spec.CognitoOptions = nil
	}
	if resp.DomainStatus.Created != nil {
		ko.Status.Created = resp.DomainStatus.Created
	} else {
		ko.Status.Created = nil
	}
	if resp.DomainStatus.Deleted != nil {
		ko.Status.Deleted = resp.DomainStatus.Deleted
	} else {
		ko.Status.Deleted = nil
	}
	if resp.DomainStatus.DomainEndpointOptions != nil {
		f8 := &svcapitypes.DomainEndpointOptions{}
		if resp.DomainStatus.DomainEndpointOptions.CustomEndpoint != nil {
			f8.CustomEndpoint = resp.DomainStatus.DomainEndpointOptions.CustomEndpoint
		}
		if resp.DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn != nil {
			f8.CustomEndpointCertificateARN = resp.DomainStatus.DomainEndpointOptions.CustomEndpointCertificateArn
		}
		if resp.DomainStatus.DomainEndpointOptions.CustomEndpointEnabled != nil {
			f8.CustomEndpointEnabled = resp.DomainStatus.DomainEndpointOptions.CustomEndpointEnabled
		}
		if resp.DomainStatus.DomainEndpointOptions.EnforceHTTPS != nil {
			f8.EnforceHTTPS = resp.DomainStatus.DomainEndpointOptions.EnforceHTTPS
		}
		if resp.DomainStatus.DomainEndpointOptions.TLSSecurityPolicy != nil {
			f8.TLSSecurityPolicy = resp.DomainStatus.DomainEndpointOptions.TLSSecurityPolicy
		}
		ko.Spec.DomainEndpointOptions = f8
	} else {
		ko.Spec.DomainEndpointOptions = nil
	}
	if resp.DomainStatus.DomainId != nil {
		ko.Status.DomainID = resp.DomainStatus.DomainId
	} else {
		ko.Status.DomainID = nil
	}
	if resp.DomainStatus.DomainName != nil {
		ko.Spec.DomainName = resp.DomainStatus.DomainName
	} else {
		ko.Spec.DomainName = nil
	}
	if resp.DomainStatus.EBSOptions != nil {
		f11 := &svcapitypes.EBSOptions{}
		if resp.DomainStatus.EBSOptions.EBSEnabled != nil {
			f11.EBSEnabled = resp.DomainStatus.EBSOptions.EBSEnabled
		}
		if resp.DomainStatus.EBSOptions.Iops != nil {
			f11.IOPS = resp.DomainStatus.EBSOptions.Iops
		}
		if resp.DomainStatus.EBSOptions.VolumeSize != nil {
			f11.VolumeSize = resp.DomainStatus.EBSOptions.VolumeSize
		}
		if resp.DomainStatus.EBSOptions.VolumeType != nil {
			f11.VolumeType = resp.DomainStatus.EBSOptions.VolumeType
		}
		ko.Spec.EBSOptions = f11
	} else {
		ko.Spec.EBSOptions = nil
	}
	if resp.DomainStatus.ElasticsearchClusterConfig != nil {
		f12 := &svcapitypes.ElasticsearchClusterConfig{}
		if resp.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount != nil {
			f12.DedicatedMasterCount = resp.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterCount
		}
		if resp.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled != nil {
			f12.DedicatedMasterEnabled = resp.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterEnabled
		}
		if resp.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType != nil {
			f12.DedicatedMasterType = resp.DomainStatus.ElasticsearchClusterConfig.DedicatedMasterType
		}
		if resp.DomainStatus.ElasticsearchClusterConfig.InstanceCount != nil {
			f12.InstanceCount = resp.DomainStatus.ElasticsearchClusterConfig.InstanceCount
		}
		if resp.DomainStatus.ElasticsearchClusterConfig.InstanceType != nil {
			f12.InstanceType = resp.DomainStatus.ElasticsearchClusterConfig.InstanceType
		}
		if resp.DomainStatus.ElasticsearchClusterConfig.WarmCount != nil {
			f12.WarmCount = resp.DomainStatus.ElasticsearchClusterConfig.WarmCount
		}
		if resp.DomainStatus.ElasticsearchClusterConfig.WarmEnabled != nil {
			f12.WarmEnabled = resp.DomainStatus.ElasticsearchClusterConfig.WarmEnabled
		}
		if resp.DomainStatus.ElasticsearchClusterConfig.WarmType != nil {
			f12.WarmType = resp.DomainStatus.ElasticsearchClusterConfig.WarmType
		}
		if resp.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig != nil {
			f12f8 := &svcapitypes.ZoneAwarenessConfig{}
			if resp.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount != nil {
				f12f8.AvailabilityZoneCount = resp.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount
			}
			f12.ZoneAwarenessConfig = f12f8
		}
		if resp.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled != nil {
			f12.ZoneAwarenessEnabled = resp.DomainStatus.ElasticsearchClusterConfig.ZoneAwarenessEnabled
		}
		ko.Spec.ElasticsearchClusterConfig = f12
	} else {
		ko.Spec.ElasticsearchClusterConfig = nil
	}
	if resp.DomainStatus.ElasticsearchVersion != nil {
		ko.Spec.ElasticsearchVersion = resp.DomainStatus.ElasticsearchVersion
	} else {
		ko.Spec.ElasticsearchVersion = nil
	}
	if resp.DomainStatus.EncryptionAtRestOptions != nil {
		f14 := &svcapitypes.EncryptionAtRestOptions{}
		if resp.DomainStatus.EncryptionAtRestOptions.Enabled != nil {
			f14.Enabled = resp.DomainStatus.EncryptionAtRestOptions.Enabled
		}
		if resp.DomainStatus.EncryptionAtRestOptions.KmsKeyId != nil {
			f14.KMSKeyID = resp.DomainStatus.EncryptionAtRestOptions.KmsKeyId
		}
		ko.Spec.EncryptionAtRestOptions = f14
	} else {
		ko.Spec.EncryptionAtRestOptions = nil
	}
	if resp.DomainStatus.Endpoint != nil {
		ko.Status.Endpoint = resp.DomainStatus.Endpoint
	} else {
		ko.Status.Endpoint = nil
	}
	if resp.DomainStatus.Endpoints != nil {
		f16 := map[string]*string{}
		for f16key, f16valiter := range resp.DomainStatus.Endpoints {
			var f16val string
			f16val = *f16valiter
			f16[f16key] = &f16val
		}
		ko.Status.Endpoints = f16
	} else {
		ko.Status.Endpoints = nil
	}
	if resp.DomainStatus.LogPublishingOptions != nil {
		f17 := map[string]*svcapitypes.LogPublishingOption{}
		for f17key, f17valiter := range resp.DomainStatus.LogPublishingOptions {
			f17val := &svcapitypes.LogPublishingOption{}
			if f17valiter.CloudWatchLogsLogGroupArn != nil {
				f17val.CloudWatchLogsLogGroupARN = f17valiter.CloudWatchLogsLogGroupArn
			}
			if f17valiter.Enabled != nil {
				f17val.Enabled = f17valiter.Enabled
			}
			f17[f17key] = f17val
		}
		ko.Spec.LogPublishingOptions = f17
	} else {
		ko.Spec.LogPublishingOptions = nil
	}
	if resp.DomainStatus.NodeToNodeEncryptionOptions != nil {
		f18 := &svcapitypes.NodeToNodeEncryptionOptions{}
		if resp.DomainStatus.NodeToNodeEncryptionOptions.Enabled != nil {
			f18.Enabled = resp.DomainStatus.NodeToNodeEncryptionOptions.Enabled
		}
		ko.Spec.NodeToNodeEncryptionOptions = f18
	} else {
		ko.Spec.NodeToNodeEncryptionOptions = nil
	}
	if resp.DomainStatus.Processing != nil {
		ko.Status.Processing = resp.DomainStatus.Processing
	} else {
		ko.Status.Processing = nil
	}
	if resp.DomainStatus.ServiceSoftwareOptions != nil {
		f20 := &svcapitypes.ServiceSoftwareOptions{}
		if resp.DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate != nil {
			f20.AutomatedUpdateDate = &metav1.Time{*resp.DomainStatus.ServiceSoftwareOptions.AutomatedUpdateDate}
		}
		if resp.DomainStatus.ServiceSoftwareOptions.Cancellable != nil {
			f20.Cancellable = resp.DomainStatus.ServiceSoftwareOptions.Cancellable
		}
		if resp.DomainStatus.ServiceSoftwareOptions.CurrentVersion != nil {
			f20.CurrentVersion = resp.DomainStatus.ServiceSoftwareOptions.CurrentVersion
		}
		if resp.DomainStatus.ServiceSoftwareOptions.Description != nil {
			f20.Description = resp.DomainStatus.ServiceSoftwareOptions.Description
		}
		if resp.DomainStatus.ServiceSoftwareOptions.NewVersion != nil {
			f20.NewVersion = resp.DomainStatus.ServiceSoftwareOptions.NewVersion
		}
		if resp.DomainStatus.ServiceSoftwareOptions.OptionalDeployment != nil {
			f20.OptionalDeployment = resp.DomainStatus.ServiceSoftwareOptions.OptionalDeployment
		}
		if resp.DomainStatus.ServiceSoftwareOptions.UpdateAvailable != nil {
			f20.UpdateAvailable = resp.DomainStatus.ServiceSoftwareOptions.UpdateAvailable
		}
		if resp.DomainStatus.ServiceSoftwareOptions.UpdateStatus != nil {
			f20.UpdateStatus = resp.DomainStatus.ServiceSoftwareOptions.UpdateStatus
		}
		ko.Status.ServiceSoftwareOptions = f20
	} else {
		ko.Status.ServiceSoftwareOptions = nil
	}
	if resp.DomainStatus.SnapshotOptions != nil {
		f21 := &svcapitypes.SnapshotOptions{}
		if resp.DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour != nil {
			f21.AutomatedSnapshotStartHour = resp.DomainStatus.SnapshotOptions.AutomatedSnapshotStartHour
		}
		ko.Spec.SnapshotOptions = f21
	} else {
		ko.Spec.SnapshotOptions = nil
	}
	if resp.DomainStatus.UpgradeProcessing != nil {
		ko.Status.UpgradeProcessing = resp.DomainStatus.UpgradeProcessing
	} else {
		ko.Status.UpgradeProcessing = nil
	}
	if resp.DomainStatus.VPCOptions != nil {
		f23 := &svcapitypes.VPCOptions{}
		if resp.DomainStatus.VPCOptions.SecurityGroupIds != nil {
			f23f1 := []*string{}
			for _, f23f1iter := range resp.DomainStatus.VPCOptions.SecurityGroupIds {
				var f23f1elem string
				f23f1elem = *f23f1iter
				f23f1 = append(f23f1, &f23f1elem)
			}
			f23.SecurityGroupIDs = f23f1
		}
		if resp.DomainStatus.VPCOptions.SubnetIds != nil {
			f23f2 := []*string{}
			for _, f23f2iter := range resp.DomainStatus.VPCOptions.SubnetIds {
				var f23f2elem string
				f23f2elem = *f23f2iter
				f23f2 = append(f23f2, &f23f2elem)
			}
			f23.SubnetIDs = f23f2
		}
		ko.Spec.VPCOptions = f23
	} else {
		ko.Spec.VPCOptions = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateElasticsearchDomainInput, error) {
	res := &svcsdk.CreateElasticsearchDomainInput{}

	if r.ko.Spec.AccessPolicies != nil {
		res.SetAccessPolicies(*r.ko.Spec.AccessPolicies)
	}
	if r.ko.Spec.AdvancedOptions != nil {
		f1 := map[string]*string{}
		for f1key, f1valiter := range r.ko.Spec.AdvancedOptions {
			var f1val string
			f1val = *f1valiter
			f1[f1key] = &f1val
		}
		res.SetAdvancedOptions(f1)
	}
	if r.ko.Spec.AdvancedSecurityOptions != nil {
		f2 := &svcsdk.AdvancedSecurityOptionsInput{}
		if r.ko.Spec.AdvancedSecurityOptions.Enabled != nil {
			f2.SetEnabled(*r.ko.Spec.AdvancedSecurityOptions.Enabled)
		}
		if r.ko.Spec.AdvancedSecurityOptions.InternalUserDatabaseEnabled != nil {
			f2.SetInternalUserDatabaseEnabled(*r.ko.Spec.AdvancedSecurityOptions.InternalUserDatabaseEnabled)
		}
		if r.ko.Spec.AdvancedSecurityOptions.MasterUserOptions != nil {
			f2f2 := &svcsdk.MasterUserOptions{}
			if r.ko.Spec.AdvancedSecurityOptions.MasterUserOptions.MasterUserARN != nil {
				f2f2.SetMasterUserARN(*r.ko.Spec.AdvancedSecurityOptions.MasterUserOptions.MasterUserARN)
			}
			if r.ko.Spec.AdvancedSecurityOptions.MasterUserOptions.MasterUserName != nil {
				f2f2.SetMasterUserName(*r.ko.Spec.AdvancedSecurityOptions.MasterUserOptions.MasterUserName)
			}
			if r.ko.Spec.AdvancedSecurityOptions.MasterUserOptions.MasterUserPassword != nil {
				f2f2.SetMasterUserPassword(*r.ko.Spec.AdvancedSecurityOptions.MasterUserOptions.MasterUserPassword)
			}
			f2.SetMasterUserOptions(f2f2)
		}
		if r.ko.Spec.AdvancedSecurityOptions.SAMLOptions != nil {
			f2f3 := &svcsdk.SAMLOptionsInput{}
			if r.ko.Spec.AdvancedSecurityOptions.SAMLOptions.Enabled != nil {
				f2f3.SetEnabled(*r.ko.Spec.AdvancedSecurityOptions.SAMLOptions.Enabled)
			}
			if r.ko.Spec.AdvancedSecurityOptions.SAMLOptions.IDp != nil {
				f2f3f1 := &svcsdk.SAMLIdp{}
				if r.ko.Spec.AdvancedSecurityOptions.SAMLOptions.IDp.EntityID != nil {
					f2f3f1.SetEntityId(*r.ko.Spec.AdvancedSecurityOptions.SAMLOptions.IDp.EntityID)
				}
				if r.ko.Spec.AdvancedSecurityOptions.SAMLOptions.IDp.MetadataContent != nil {
					f2f3f1.SetMetadataContent(*r.ko.Spec.AdvancedSecurityOptions.SAMLOptions.IDp.MetadataContent)
				}
				f2f3.SetIdp(f2f3f1)
			}
			if r.ko.Spec.AdvancedSecurityOptions.SAMLOptions.MasterBackendRole != nil {
				f2f3.SetMasterBackendRole(*r.ko.Spec.AdvancedSecurityOptions.SAMLOptions.MasterBackendRole)
			}
			if r.ko.Spec.AdvancedSecurityOptions.SAMLOptions.MasterUserName != nil {
				f2f3.SetMasterUserName(*r.ko.Spec.AdvancedSecurityOptions.SAMLOptions.MasterUserName)
			}
			if r.ko.Spec.AdvancedSecurityOptions.SAMLOptions.RolesKey != nil {
				f2f3.SetRolesKey(*r.ko.Spec.AdvancedSecurityOptions.SAMLOptions.RolesKey)
			}
			if r.ko.Spec.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes != nil {
				f2f3.SetSessionTimeoutMinutes(*r.ko.Spec.AdvancedSecurityOptions.SAMLOptions.SessionTimeoutMinutes)
			}
			if r.ko.Spec.AdvancedSecurityOptions.SAMLOptions.SubjectKey != nil {
				f2f3.SetSubjectKey(*r.ko.Spec.AdvancedSecurityOptions.SAMLOptions.SubjectKey)
			}
			f2.SetSAMLOptions(f2f3)
		}
		res.SetAdvancedSecurityOptions(f2)
	}
	if r.ko.Spec.AutoTuneOptions != nil {
		f3 := &svcsdk.AutoTuneOptionsInput{}
		if r.ko.Spec.AutoTuneOptions.DesiredState != nil {
			f3.SetDesiredState(*r.ko.Spec.AutoTuneOptions.DesiredState)
		}
		if r.ko.Spec.AutoTuneOptions.MaintenanceSchedules != nil {
			f3f1 := []*svcsdk.AutoTuneMaintenanceSchedule{}
			for _, f3f1iter := range r.ko.Spec.AutoTuneOptions.MaintenanceSchedules {
				f3f1elem := &svcsdk.AutoTuneMaintenanceSchedule{}
				if f3f1iter.CronExpressionForRecurrence != nil {
					f3f1elem.SetCronExpressionForRecurrence(*f3f1iter.CronExpressionForRecurrence)
				}
				if f3f1iter.Duration != nil {
					f3f1elemf1 := &svcsdk.Duration{}
					if f3f1iter.Duration.Unit != nil {
						f3f1elemf1.SetUnit(*f3f1iter.Duration.Unit)
					}
					if f3f1iter.Duration.Value != nil {
						f3f1elemf1.SetValue(*f3f1iter.Duration.Value)
					}
					f3f1elem.SetDuration(f3f1elemf1)
				}
				if f3f1iter.StartAt != nil {
					f3f1elem.SetStartAt(f3f1iter.StartAt.Time)
				}
				f3f1 = append(f3f1, f3f1elem)
			}
			f3.SetMaintenanceSchedules(f3f1)
		}
		res.SetAutoTuneOptions(f3)
	}
	if r.ko.Spec.CognitoOptions != nil {
		f4 := &svcsdk.CognitoOptions{}
		if r.ko.Spec.CognitoOptions.Enabled != nil {
			f4.SetEnabled(*r.ko.Spec.CognitoOptions.Enabled)
		}
		if r.ko.Spec.CognitoOptions.IdentityPoolID != nil {
			f4.SetIdentityPoolId(*r.ko.Spec.CognitoOptions.IdentityPoolID)
		}
		if r.ko.Spec.CognitoOptions.RoleARN != nil {
			f4.SetRoleArn(*r.ko.Spec.CognitoOptions.RoleARN)
		}
		if r.ko.Spec.CognitoOptions.UserPoolID != nil {
			f4.SetUserPoolId(*r.ko.Spec.CognitoOptions.UserPoolID)
		}
		res.SetCognitoOptions(f4)
	}
	if r.ko.Spec.DomainEndpointOptions != nil {
		f5 := &svcsdk.DomainEndpointOptions{}
		if r.ko.Spec.DomainEndpointOptions.CustomEndpoint != nil {
			f5.SetCustomEndpoint(*r.ko.Spec.DomainEndpointOptions.CustomEndpoint)
		}
		if r.ko.Spec.DomainEndpointOptions.CustomEndpointCertificateARN != nil {
			f5.SetCustomEndpointCertificateArn(*r.ko.Spec.DomainEndpointOptions.CustomEndpointCertificateARN)
		}
		if r.ko.Spec.DomainEndpointOptions.CustomEndpointEnabled != nil {
			f5.SetCustomEndpointEnabled(*r.ko.Spec.DomainEndpointOptions.CustomEndpointEnabled)
		}
		if r.ko.Spec.DomainEndpointOptions.EnforceHTTPS != nil {
			f5.SetEnforceHTTPS(*r.ko.Spec.DomainEndpointOptions.EnforceHTTPS)
		}
		if r.ko.Spec.DomainEndpointOptions.TLSSecurityPolicy != nil {
			f5.SetTLSSecurityPolicy(*r.ko.Spec.DomainEndpointOptions.TLSSecurityPolicy)
		}
		res.SetDomainEndpointOptions(f5)
	}
	if r.ko.Spec.DomainName != nil {
		res.SetDomainName(*r.ko.Spec.DomainName)
	}
	if r.ko.Spec.EBSOptions != nil {
		f7 := &svcsdk.EBSOptions{}
		if r.ko.Spec.EBSOptions.EBSEnabled != nil {
			f7.SetEBSEnabled(*r.ko.Spec.EBSOptions.EBSEnabled)
		}
		if r.ko.Spec.EBSOptions.IOPS != nil {
			f7.SetIops(*r.ko.Spec.EBSOptions.IOPS)
		}
		if r.ko.Spec.EBSOptions.VolumeSize != nil {
			f7.SetVolumeSize(*r.ko.Spec.EBSOptions.VolumeSize)
		}
		if r.ko.Spec.EBSOptions.VolumeType != nil {
			f7.SetVolumeType(*r.ko.Spec.EBSOptions.VolumeType)
		}
		res.SetEBSOptions(f7)
	}
	if r.ko.Spec.ElasticsearchClusterConfig != nil {
		f8 := &svcsdk.ElasticsearchClusterConfig{}
		if r.ko.Spec.ElasticsearchClusterConfig.DedicatedMasterCount != nil {
			f8.SetDedicatedMasterCount(*r.ko.Spec.ElasticsearchClusterConfig.DedicatedMasterCount)
		}
		if r.ko.Spec.ElasticsearchClusterConfig.DedicatedMasterEnabled != nil {
			f8.SetDedicatedMasterEnabled(*r.ko.Spec.ElasticsearchClusterConfig.DedicatedMasterEnabled)
		}
		if r.ko.Spec.ElasticsearchClusterConfig.DedicatedMasterType != nil {
			f8.SetDedicatedMasterType(*r.ko.Spec.ElasticsearchClusterConfig.DedicatedMasterType)
		}
		if r.ko.Spec.ElasticsearchClusterConfig.InstanceCount != nil {
			f8.SetInstanceCount(*r.ko.Spec.ElasticsearchClusterConfig.InstanceCount)
		}
		if r.ko.Spec.ElasticsearchClusterConfig.InstanceType != nil {
			f8.SetInstanceType(*r.ko.Spec.ElasticsearchClusterConfig.InstanceType)
		}
		if r.ko.Spec.ElasticsearchClusterConfig.WarmCount != nil {
			f8.SetWarmCount(*r.ko.Spec.ElasticsearchClusterConfig.WarmCount)
		}
		if r.ko.Spec.ElasticsearchClusterConfig.WarmEnabled != nil {
			f8.SetWarmEnabled(*r.ko.Spec.ElasticsearchClusterConfig.WarmEnabled)
		}
		if r.ko.Spec.ElasticsearchClusterConfig.WarmType != nil {
			f8.SetWarmType(*r.ko.Spec.ElasticsearchClusterConfig.WarmType)
		}
		if r.ko.Spec.ElasticsearchClusterConfig.ZoneAwarenessConfig != nil {
			f8f8 := &svcsdk.ZoneAwarenessConfig{}
			if r.ko.Spec.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount != nil {
				f8f8.SetAvailabilityZoneCount(*r.ko.Spec.ElasticsearchClusterConfig.ZoneAwarenessConfig.AvailabilityZoneCount)
			}
			f8.SetZoneAwarenessConfig(f8f8)
		}
		if r.ko.Spec.ElasticsearchClusterConfig.ZoneAwarenessEnabled != nil {
			f8.SetZoneAwarenessEnabled(*r.ko.Spec.ElasticsearchClusterConfig.ZoneAwarenessEnabled)
		}
		res.SetElasticsearchClusterConfig(f8)
	}
	if r.ko.Spec.ElasticsearchVersion != nil {
		res.SetElasticsearchVersion(*r.ko.Spec.ElasticsearchVersion)
	}
	if r.ko.Spec.EncryptionAtRestOptions != nil {
		f10 := &svcsdk.EncryptionAtRestOptions{}
		if r.ko.Spec.EncryptionAtRestOptions.Enabled != nil {
			f10.SetEnabled(*r.ko.Spec.EncryptionAtRestOptions.Enabled)
		}
		if r.ko.Spec.EncryptionAtRestOptions.KMSKeyID != nil {
			f10.SetKmsKeyId(*r.ko.Spec.EncryptionAtRestOptions.KMSKeyID)
		}
		res.SetEncryptionAtRestOptions(f10)
	}
	if r.ko.Spec.LogPublishingOptions != nil {
		f11 := map[string]*svcsdk.LogPublishingOption{}
		for f11key, f11valiter := range r.ko.Spec.LogPublishingOptions {
			f11val := &svcsdk.LogPublishingOption{}
			if f11valiter.CloudWatchLogsLogGroupARN != nil {
				f11val.SetCloudWatchLogsLogGroupArn(*f11valiter.CloudWatchLogsLogGroupARN)
			}
			if f11valiter.Enabled != nil {
				f11val.SetEnabled(*f11valiter.Enabled)
			}
			f11[f11key] = f11val
		}
		res.SetLogPublishingOptions(f11)
	}
	if r.ko.Spec.NodeToNodeEncryptionOptions != nil {
		f12 := &svcsdk.NodeToNodeEncryptionOptions{}
		if r.ko.Spec.NodeToNodeEncryptionOptions.Enabled != nil {
			f12.SetEnabled(*r.ko.Spec.NodeToNodeEncryptionOptions.Enabled)
		}
		res.SetNodeToNodeEncryptionOptions(f12)
	}
	if r.ko.Spec.SnapshotOptions != nil {
		f13 := &svcsdk.SnapshotOptions{}
		if r.ko.Spec.SnapshotOptions.AutomatedSnapshotStartHour != nil {
			f13.SetAutomatedSnapshotStartHour(*r.ko.Spec.SnapshotOptions.AutomatedSnapshotStartHour)
		}
		res.SetSnapshotOptions(f13)
	}
	if r.ko.Spec.TagList != nil {
		f14 := []*svcsdk.Tag{}
		for _, f14iter := range r.ko.Spec.TagList {
			f14elem := &svcsdk.Tag{}
			if f14iter.Key != nil {
				f14elem.SetKey(*f14iter.Key)
			}
			if f14iter.Value != nil {
				f14elem.SetValue(*f14iter.Value)
			}
			f14 = append(f14, f14elem)
		}
		res.SetTagList(f14)
	}
	if r.ko.Spec.VPCOptions != nil {
		f15 := &svcsdk.VPCOptions{}
		if r.ko.Spec.VPCOptions.SecurityGroupIDs != nil {
			f15f0 := []*string{}
			for _, f15f0iter := range r.ko.Spec.VPCOptions.SecurityGroupIDs {
				var f15f0elem string
				f15f0elem = *f15f0iter
				f15f0 = append(f15f0, &f15f0elem)
			}
			f15.SetSecurityGroupIds(f15f0)
		}
		if r.ko.Spec.VPCOptions.SubnetIDs != nil {
			f15f1 := []*string{}
			for _, f15f1iter := range r.ko.Spec.VPCOptions.SubnetIDs {
				var f15f1elem string
				f15f1elem = *f15f1iter
				f15f1 = append(f15f1, &f15f1elem)
			}
			f15.SetSubnetIds(f15f1)
		}
		res.SetVPCOptions(f15)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (*resource, error) {
	// TODO(jaypipes): Figure this out...
	return nil, ackerr.NotImplemented
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer exit(err)
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteElasticsearchDomainOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteElasticsearchDomainWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteElasticsearchDomain", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteElasticsearchDomainInput, error) {
	res := &svcsdk.DeleteElasticsearchDomainInput{}

	if r.ko.Spec.DomainName != nil {
		res.SetDomainName(*r.ko.Spec.DomainName)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.ElasticsearchDomain,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}

	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}
	awsErr, ok := ackerr.AWSError(err)
	if !ok {
		return false
	}
	switch awsErr.Code() {
	case "ValidationException":
		return true
	default:
		return false
	}
}
